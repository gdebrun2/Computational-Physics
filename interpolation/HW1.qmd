---
title: "HW1"
author: "Gavin DeBrun"
format: pdf
editor: visual
header-includes:
  - \usepackage{titling}
  - \setlength{\droptitle}{-2cm}
  - \usepackage{amsmath}
geometry:
  - left=.25in
  - right=.25in
  - top=.25in
  - bottom =.25in
---
\vspace{-2cm}

### 1a)

$(x_{i}, y_{i}) \in \{(0,0), (\frac{1}{2}, 1), (1, 0)\}$

$L_{0} = \frac{(x - \frac{1}{2})(x - 1)}{(0 - \frac{1}{2})(0 - 1)} = 2(x-\frac{1}{2})(x-1)$

$L_{1} = \frac{(x - 0)(x - 1)}{(\frac{1}{2} - 0)(\frac{1}{2} - 1)} = -4x(x-1)$

$L_{2} = \frac{(x - 0)(x - \frac{1}{2})}{(1 - 0)(1 - \frac{1}{2})} = 2x(x-\frac{1}{2})$

$P_{2}(x) = 0 \cdot L_{0} + 1 \cdot L_{1} + 0 \cdot L_{2} = L_{1}$

$P_{2}(\frac{1}{4}) = -4(\frac{1}{4})(\frac{1}{4} - 1) = \boxed{\frac{3}{4}}$

### 1b)

$P_{2}'(x) = -8x + 4$

$\boxed{P_{2}'(\frac{1}{4}) = 2}$


### 2)


```{python}
import numpy as np

def lagrange(x, f, xx):
    
    yy = 0
    for i in range(len(x)):
        Lj = 1
        for j in range(len(x)):
            if i != j:
                Lj *= (xx - x[j]) / (x[i] - x[j])
        yy += Lj * f[i]
    return yy
```

### 3a)

We have $g''(0)=0=g''(4)$, $h = 1$ and $b_{i} = \frac{y_{i+1} - 2y_{i} + y_{i-1}}{h^{2}}$ for $i \neq \{0, 4\}$

Thus, $A = \begin{bmatrix}
1 & 0 & 0 & 0 & 0\\ \vspace{0.1cm}
\frac{1}{6} & \frac{2}{3} & \frac{1}{6} & 0 & 0\\ \vspace{0.1cm}
0 & \frac{1}{6} & \frac{2}{3} & \frac{1}{6} & 0\\ \vspace{0.1cm}
0 & 0 & \frac{1}{6} & \frac{2}{3} & \frac{1}{6}\\ \vspace{0.1cm}
0 & 0 & 0 & 0 & 1
\end{bmatrix}$, $x = \begin{bmatrix}
g''(x_{0})\\ \vspace{0.1cm}
g''(x_{1})\\ \vspace{0.1cm}
g''(x_{2})\\ \vspace{0.1cm}
g''(x_{3})\\ \vspace{0.1cm}
g''(x_{4})
\end{bmatrix}$ and using the aforementioned formula for the applicable $b_{i}$'s, we obtain:
$b = \begin{bmatrix}
0\\ \vspace{.1cm}
1\\ \vspace{.1cm}
-12\\ \vspace{.1cm}
9\\ \vspace{.1cm}
0
\end{bmatrix}$

Now we can solve the system of equations for $x$:

```{python}
import numpy as np
A = np.array([[1, 0, 0, 0, 0],
              [1/6, 2/3, 1/6, 0, 0],
              [0, 1/6, 2/3, 1/6, 0],
              [0, 0, 1/6, 2/3, 1/6],
              [0, 0, 0, 0, 1]])
b = np.array([0, 1, -12, 9, 0])
gpp = np.linalg.solve(A, b)
print(gpp)
```

Thus, we have $g''(0) = 0$, $g''(1) = 7.714$, $g''(2) = -24.857$, $g''(3) = 19.714$ and $g''(4) = 0$.

### 3b)

We have $i = 2$, $i + 1 = 3$, $y_{i} = 7$, $y_{i+1} = -1$, $g''(x_{i}) = -24.857$, and $g''(x_{i+1}) = 19.714$. So using Moin eq. 1.6, we have:

$g_{2}(2.4) = \frac{-24.857}{6}\cdot [(.6)^{3} - .6] + \frac{19.714}{6}[(.4)^{3} - .4]+3.8 = \boxed{4.287}$

### 3c)

```{python}
import numpy as np
from scipy.interpolate import CubicSpline

x = np.array([0, 1, 2, 3, 4])
y = np.array([0, 3, 7, -1, 0])

cs = CubicSpline(x, y, bc_type="natural")
print(cs(2.4))
```

### 4)

```{python}
import numpy as np
from scipy.interpolate import CubicSpline
import matplotlib.pyplot as plt


def lagrange(x, f, xx):
    yy = 0
    for i in range(len(x)):
        Lj = 1
        for j in range(len(x)):
            if i != j:
                Lj *= (xx - x[j]) / (x[i] - x[j])
        yy += Lj * f[i]
    return yy


x = np.array([0, 1, 2, 3, 4])
y = np.array([0, 3, 7, -1, 0])
xx = np.linspace(0, 4, 100)

lg_interp = lagrange(x, y, xx)

cs1 = CubicSpline(x, y, bc_type="not-a-knot")
nak_interp = cs1(xx)

cs2 = CubicSpline(x, y, bc_type="natural")
nat_interp = cs2(xx)

cs3 = CubicSpline(x, y, bc_type=((1, 1), (1, 0)))
clamp_interp = cs3(xx)

plt.plot(xx, lg_interp, label="Lagrange")
plt.plot(xx, nak_interp, label="Not-a-Knot")
plt.plot(xx, nat_interp, label="Natural")
plt.plot(xx, clamp_interp, label="Clamped")
plt.scatter(x, y, label="Data", marker="x", zorder=10, color="black")
plt.legend()
plt.xlabel("x")
plt.ylabel("y")
plt.title("Lagrange vs. Cubic Splines Interpolation")
plt.show()
```